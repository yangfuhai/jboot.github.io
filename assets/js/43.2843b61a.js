(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{556:function(t,s,a){"use strict";a.r(s);var e=a(4),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[t._v("#")]),t._v(" 序列化")]),t._v(" "),a("p",[t._v("在jboot中，很多分布式的调用，需要把 javaBean 序列化后才能进行传输 或者 进行缓存。比如 rpc、mq、cache 等都需要序列化组件。")]),t._v(" "),a("p",[t._v("例如，在 redis 中，我们可以为 redis 组件自定义自己的序列化方式，只需要进入如下配置即可：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.serializer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("xxxx")]),t._v("\n")])])]),a("p",[t._v("自定义序列化是通过Jboot的SPI机制来实现的，我们只需要安装 SPI 规范来实现自己的序列化组件，然后通过以上配置即可。")]),t._v(" "),a("p",[t._v("更多关于 SPI 的查看 "),a("RouterLink",{attrs:{to:"/docs/.spi.html"}},[t._v("这里")]),t._v(" 。")],1)])}),[],!1,null,null,null);s.default=r.exports}}]);